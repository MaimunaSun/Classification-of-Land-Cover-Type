# -*- coding: utf-8 -*-
"""AUC ROC.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15zBxxB2hsTsWijrr0ZqpwgyYRLCyDtLN
"""

#IMPORT DEPENDENCIES
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score
from sklearn.metrics import classification_report
import collections
from sklearn.metrics import confusion_matrix
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
from sklearn.naive_bayes import GaussianNB
from sklearn.neural_network import MLPClassifier

#import dataset
DATA = pd.read_csv("train.csv")
#Drop the ID Column
DATA = DATA.drop('Id', axis = 1)
#Make sure Data is in place
DATA.sort_index(inplace = True)

#Extract the features of the DataSet
features = DATA.drop('Cover_Type', axis = 1)

#Extract the target(Cover Type) that needs to be predicted
target = DATA.Cover_Type

#split the data into test and train data
features_train, target_train = features[0:12096], target[0:12096]
features_test, target_test = features[12096:], target[12096:]

#Create a Gaussian Naive Bayes Classifier
Gmodel = GaussianNB()
#Train the model using the training dataset
Gmodel.fit(features_train, target_train)

#Create SVM Classifier
#SVC Classifier
Smodel = SVC(kernel = 'linear', probability = True)
#Train the model using the training dataset
Smodel.fit(features_train, target_train)

#Create MLP Deep Neural Network Classifier
Dmodel = MLPClassifier(hidden_layer_sizes=(150,100,50,20), max_iter=301,activation = 'relu',solver='adam', random_state=0)
#Train the model using the training dataset
Dmodel.fit(features_train, target_train)

#R0C PLOT DEPENDENCIES
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
import sklearn

from sklearn import metrics
from sklearn import datasets
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn import svm, datasets
from sklearn.model_selection import train_test_split
from sklearn.metrics import roc_curve, roc_auc_score
from sklearn.metrics import plot_roc_curve, auc
from sklearn.neural_network import MLPClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn import svm
from sklearn.multiclass import OneVsRestClassifier
from sklearn.preprocessing import label_binarize
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt

#set up plotting area
plt.figure(0).clf()

#Gaussian Naive Bayes Classifier
y_pred = Gmodel.predict_proba(features_test)[:,1]
fpr,tpr, threshold = roc_curve(target_test, y_pred, pos_label = 1)
plt.plot(fpr,tpr,label = "Gaussian Naive Bayes")#+ str(auc))

#Suport Vector Classifier
y_pred = Smodel.predict(features_test)[:,1]
fpr,tpr, _ = roc_curve(target_test, y_pred[:,1], pos_label=1)
plt.plot(fpr,tpr,label = "Support Vector Machine,AUC")# + str(auc))

# MLP Deep Neural Network
prediction = Dmodel.predict_proba(features_test)[:,1]
fpr,tpr, _ = roc_curve(target_test, prediction, pos_label =1)
plt.plot(fpr,tpr,label = "Deep Neural Network")#+ str(auc))

plt.legend()
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Receiver Operating Characteristic(ROC Curve)')

#AUC ROC FOR GUASSIAN NAIVE BAYES CLASSIFIER
y_prob = Gmodel.predict_proba(features_test)

macro_roc_auc_ovr = roc_auc_score(target_test, y_prob, multi_class="ovr", average="macro")
weighted_roc_auc_ovr = roc_auc_score(
    target_test, y_prob, multi_class="ovr", average="weighted"
)

print(
    "One-vs-Rest ROC AUC  scores:\n{:.6f} (macro),\n{:.6f} "
    "(weighted by prevalence)".format(macro_roc_auc_ovr, weighted_roc_auc_ovr)
)

#AUC ROC MLP DEEP NEURAL NETWORK CLASSIFIER
y_prob = Dmodel.predict_proba(features_test)

macro_roc_auc_ovr = roc_auc_score(target_test, y_prob, multi_class="ovr", average="macro")
weighted_roc_auc_ovr = roc_auc_score(
    target_test, y_prob, multi_class="ovr", average="weighted"
)

print(
    "One-vs-Rest ROC AUC scores:\n{:.6f} (macro),\n{:.6f} "
    "(weighted by prevalence)".format(macro_roc_auc_ovr, weighted_roc_auc_ovr)
)

#AUC ROC FOR SVC
y_prob = Smodel.predict_proba(features_test)

macro_roc_auc_ovr = roc_auc_score(target_test, y_prob, multi_class="ovr", average="macro")
weighted_roc_auc_ovr = roc_auc_score(
    target_test, y_prob, multi_class="ovr", average="weighted"
)

print(
    "One-vs-Rest ROC AUC scores:\n{:.6f} (macro),\n{:.6f} "
    "(weighted by prevalence)".format(macro_roc_auc_ovr, weighted_roc_auc_ovr)
)




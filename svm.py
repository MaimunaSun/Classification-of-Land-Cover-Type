# -*- coding: utf-8 -*-
"""SVM.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13n_P28P7B04ZcMaY_2ATBhWwIeVOS4KS
"""

#IMPORT DEPENDENCIES
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score
from sklearn.metrics import classification_report
import collections
from sklearn.metrics import confusion_matrix
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay

#IMPORT DATA
DATA = pd.read_csv("train.csv")

DATA = DATA.drop('Id', axis = 1)

DATA.tail()

DATA.head()

DATA.shape

DATA.sort_index(inplace = True)

#Cover Type Features
features = DATA.drop('Cover_Type', axis = 1)

#Cover Types
target = DATA.Cover_Type

#split the data into test and train data
features_train, target_train = features[0:12096], target[0:12096]
features_test, target_test = features[12096:], target[12096:]

#Create SVM Classifier
model = SVC(kernel = 'linear')

#Train the model using the training sets
model.fit(features_train, target_train)

#Predict the response for test dataset
Predicted_Values = model.predict(features_test)

# Model Accuracy, how often is the classifier correct?
model.score(features_test, target_test)

# Model Accuracy, how often has the Classifier predicted the correct target
accuracy_score(target_test, Predicted_Values)

print(classification_report(target_test, Predicted_Values))

#Plot Confusion Matrix for the Classifier
CMatrix = confusion_matrix(target_test, Predicted_Values,labels=model.classes_)
disp = ConfusionMatrixDisplay(confusion_matrix=CMatrix, display_labels=model.classes_)
disp.plot()
plt.show()

#lOAD THE TEST DATA USED FOR COVER TYPE PREDICTION
TestDATA = pd.read_csv("test.csv")

TestDATA.head()

#Extract the features of the DataSet
TestFeatures = TestDATA.drop('Id', axis = 1)

TestFeatures.head()

#Predict the Cover Type
CoverType = model.predict(TestFeatures)

display(CoverType[0:400])

#Frequency of of predicted Clasess
Frequency =collections.Counter(CoverType)
DF=pd.DataFrame(Frequency.items())
DF.columns=['Cover Type','Frequency']
DF = DF.sort_values(by='Cover Type')
Table = DF.set_index('Cover Type')
display(Table)

#Bar Graph of Frequency Vs Classes
DF.plot(kind='bar',x ='Cover Type',y='Frequency')




# -*- coding: utf-8 -*-
"""NiaveBayes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Vw3nl7au6e_AgiSaVPxXderV1ZZmcmiv
"""

#IMPORT DEPENDENCIES
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score
from sklearn.metrics import classification_report
import collections
from sklearn.metrics import confusion_matrix
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay

#import dataset
DATA = pd.read_csv("train.csv")

#Display the upper part of the dataset
DATA.head()

#Drop the ID Column
DATA = DATA.drop('Id', axis = 1)

#Display the upper part of the dataset
DATA.head()

#Display the bottom part of the dataset
DATA.tail()

DATA.shape

#Make sure Data is in place
DATA.sort_index(inplace = True)

DATA.head()

DATA.tail()

#Extract the features of the DataSet
features = DATA.drop('Cover_Type', axis = 1)

#Extract the target(Cover Type) that needs to be predicted
target = DATA.Cover_Type

#Display the features
display(features[0:10])

#Display the Cover Type
display(target[0:10])

#split the data into test and train data
features_train, target_train = features[0:12096], target[0:12096]
features_test, target_test = features[12096:], target[12096:]

#Create a Gaussian Naive Bayes Classifier
model = GaussianNB()

#Train the model using the training dataset
model.fit(features_train, target_train)

#Predict the Cover Type from test dataset
Predicted_Values = model.predict(features_test)

# Model Accuracy
model.score(features_test, target_test)

# Model Accuracy, how often has the Classifier predicted the correct target
accuracy_score(target_test, Predicted_Values)

#Classification Report
print(classification_report(target_test, Predicted_Values))

#Plot Confusion Matrix for the Classifier
CMatrix = confusion_matrix(target_test, Predicted_Values,labels=model.classes_)
disp = ConfusionMatrixDisplay(confusion_matrix=CMatrix, display_labels=model.classes_)
disp.plot()
plt.show()

#Load an Unkown datatest for Cover Type Prediction
TestDATA = pd.read_csv("test.csv")

#Display the upper part of the dataset to view data
TestDATA.head()

TestDATA.tail()

#Extract the features of the DataSet
TestFeatures = TestDATA.drop('Id', axis = 1)

#Display the upper part of the dataset to check wheter ID has been removed
TestFeatures.head()

#Predict the Cover Type
CoverType = model.predict(TestFeatures)

#Display the 1st 400 cover types in the data set
display(CoverType[0:400])

#Frequency of of predicted Clasess
Frequency =collections.Counter(CoverType)
DF=pd.DataFrame(Frequency.items())
DF.columns=['Cover Type','Frequency']
DF = DF.sort_values(by='Cover Type')
Table = DF.set_index('Cover Type')
display(Table)

#Bar Graph of Frequency Vs Classes
DF.plot(kind='bar',x ='Cover Type',y='Frequency')